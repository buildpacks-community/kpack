// Code generated by counterfeiter. DO NOT EDIT.
package extensionfakes

import (
	"sync"

	"github.com/google/go-containerregistry/pkg/authn"
	"github.com/pivotal/kpack/pkg/apis/core/v1alpha1"
	"github.com/pivotal/kpack/pkg/reconciler/extension"
)

type FakeStoreReader struct {
	ReadExtensionStub        func(authn.Keychain, []v1alpha1.ImageSource) ([]v1alpha1.BuildpackStatus, error)
	readExtensionMutex       sync.RWMutex
	readExtensionArgsForCall []struct {
		arg1 authn.Keychain
		arg2 []v1alpha1.ImageSource
	}
	readExtensionReturns struct {
		result1 []v1alpha1.BuildpackStatus
		result2 error
	}
	readExtensionReturnsOnCall map[int]struct {
		result1 []v1alpha1.BuildpackStatus
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStoreReader) ReadExtension(arg1 authn.Keychain, arg2 []v1alpha1.ImageSource) ([]v1alpha1.BuildpackStatus, error) {
	var arg2Copy []v1alpha1.ImageSource
	if arg2 != nil {
		arg2Copy = make([]v1alpha1.ImageSource, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.readExtensionMutex.Lock()
	ret, specificReturn := fake.readExtensionReturnsOnCall[len(fake.readExtensionArgsForCall)]
	fake.readExtensionArgsForCall = append(fake.readExtensionArgsForCall, struct {
		arg1 authn.Keychain
		arg2 []v1alpha1.ImageSource
	}{arg1, arg2Copy})
	stub := fake.ReadExtensionStub
	fakeReturns := fake.readExtensionReturns
	fake.recordInvocation("ReadExtension", []interface{}{arg1, arg2Copy})
	fake.readExtensionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStoreReader) ReadExtensionCallCount() int {
	fake.readExtensionMutex.RLock()
	defer fake.readExtensionMutex.RUnlock()
	return len(fake.readExtensionArgsForCall)
}

func (fake *FakeStoreReader) ReadExtensionCalls(stub func(authn.Keychain, []v1alpha1.ImageSource) ([]v1alpha1.BuildpackStatus, error)) {
	fake.readExtensionMutex.Lock()
	defer fake.readExtensionMutex.Unlock()
	fake.ReadExtensionStub = stub
}

func (fake *FakeStoreReader) ReadExtensionArgsForCall(i int) (authn.Keychain, []v1alpha1.ImageSource) {
	fake.readExtensionMutex.RLock()
	defer fake.readExtensionMutex.RUnlock()
	argsForCall := fake.readExtensionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStoreReader) ReadExtensionReturns(result1 []v1alpha1.BuildpackStatus, result2 error) {
	fake.readExtensionMutex.Lock()
	defer fake.readExtensionMutex.Unlock()
	fake.ReadExtensionStub = nil
	fake.readExtensionReturns = struct {
		result1 []v1alpha1.BuildpackStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreReader) ReadExtensionReturnsOnCall(i int, result1 []v1alpha1.BuildpackStatus, result2 error) {
	fake.readExtensionMutex.Lock()
	defer fake.readExtensionMutex.Unlock()
	fake.ReadExtensionStub = nil
	if fake.readExtensionReturnsOnCall == nil {
		fake.readExtensionReturnsOnCall = make(map[int]struct {
			result1 []v1alpha1.BuildpackStatus
			result2 error
		})
	}
	fake.readExtensionReturnsOnCall[i] = struct {
		result1 []v1alpha1.BuildpackStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readExtensionMutex.RLock()
	defer fake.readExtensionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStoreReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ extension.StoreReader = new(FakeStoreReader)
