// Code generated by counterfeiter. DO NOT EDIT.
package buildfakes

import (
	"sync"

	"github.com/google/go-containerregistry/pkg/authn"
	"github.com/pivotal/kpack/pkg/cnb"
	"github.com/pivotal/kpack/pkg/reconciler/build"
)

type FakeMetadataRetriever struct {
	GetBuildMetadataStub        func(string, string, authn.Keychain) (*cnb.BuildMetadata, error)
	getBuildMetadataMutex       sync.RWMutex
	getBuildMetadataArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 authn.Keychain
	}
	getBuildMetadataReturns struct {
		result1 *cnb.BuildMetadata
		result2 error
	}
	getBuildMetadataReturnsOnCall map[int]struct {
		result1 *cnb.BuildMetadata
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetadataRetriever) GetBuildMetadata(arg1 string, arg2 string, arg3 authn.Keychain) (*cnb.BuildMetadata, error) {
	fake.getBuildMetadataMutex.Lock()
	ret, specificReturn := fake.getBuildMetadataReturnsOnCall[len(fake.getBuildMetadataArgsForCall)]
	fake.getBuildMetadataArgsForCall = append(fake.getBuildMetadataArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 authn.Keychain
	}{arg1, arg2, arg3})
	stub := fake.GetBuildMetadataStub
	fakeReturns := fake.getBuildMetadataReturns
	fake.recordInvocation("GetBuildMetadata", []interface{}{arg1, arg2, arg3})
	fake.getBuildMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetadataRetriever) GetBuildMetadataCallCount() int {
	fake.getBuildMetadataMutex.RLock()
	defer fake.getBuildMetadataMutex.RUnlock()
	return len(fake.getBuildMetadataArgsForCall)
}

func (fake *FakeMetadataRetriever) GetBuildMetadataCalls(stub func(string, string, authn.Keychain) (*cnb.BuildMetadata, error)) {
	fake.getBuildMetadataMutex.Lock()
	defer fake.getBuildMetadataMutex.Unlock()
	fake.GetBuildMetadataStub = stub
}

func (fake *FakeMetadataRetriever) GetBuildMetadataArgsForCall(i int) (string, string, authn.Keychain) {
	fake.getBuildMetadataMutex.RLock()
	defer fake.getBuildMetadataMutex.RUnlock()
	argsForCall := fake.getBuildMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMetadataRetriever) GetBuildMetadataReturns(result1 *cnb.BuildMetadata, result2 error) {
	fake.getBuildMetadataMutex.Lock()
	defer fake.getBuildMetadataMutex.Unlock()
	fake.GetBuildMetadataStub = nil
	fake.getBuildMetadataReturns = struct {
		result1 *cnb.BuildMetadata
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadataRetriever) GetBuildMetadataReturnsOnCall(i int, result1 *cnb.BuildMetadata, result2 error) {
	fake.getBuildMetadataMutex.Lock()
	defer fake.getBuildMetadataMutex.Unlock()
	fake.GetBuildMetadataStub = nil
	if fake.getBuildMetadataReturnsOnCall == nil {
		fake.getBuildMetadataReturnsOnCall = make(map[int]struct {
			result1 *cnb.BuildMetadata
			result2 error
		})
	}
	fake.getBuildMetadataReturnsOnCall[i] = struct {
		result1 *cnb.BuildMetadata
		result2 error
	}{result1, result2}
}

func (fake *FakeMetadataRetriever) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBuildMetadataMutex.RLock()
	defer fake.getBuildMetadataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetadataRetriever) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ build.MetadataRetriever = new(FakeMetadataRetriever)
