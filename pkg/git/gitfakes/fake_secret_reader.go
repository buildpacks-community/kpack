// Code generated by counterfeiter. DO NOT EDIT.
package gitfakes

import (
	"sync"

	"github.com/pivotal/kpack/pkg/git"
)

type FakeSecretReader struct {
	FromSecretStub        func(string) (*git.BasicAuth, error)
	fromSecretMutex       sync.RWMutex
	fromSecretArgsForCall []struct {
		arg1 string
	}
	fromSecretReturns struct {
		result1 *git.BasicAuth
		result2 error
	}
	fromSecretReturnsOnCall map[int]struct {
		result1 *git.BasicAuth
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecretReader) FromSecret(arg1 string) (*git.BasicAuth, error) {
	fake.fromSecretMutex.Lock()
	ret, specificReturn := fake.fromSecretReturnsOnCall[len(fake.fromSecretArgsForCall)]
	fake.fromSecretArgsForCall = append(fake.fromSecretArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FromSecret", []interface{}{arg1})
	fake.fromSecretMutex.Unlock()
	if fake.FromSecretStub != nil {
		return fake.FromSecretStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.fromSecretReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecretReader) FromSecretCallCount() int {
	fake.fromSecretMutex.RLock()
	defer fake.fromSecretMutex.RUnlock()
	return len(fake.fromSecretArgsForCall)
}

func (fake *FakeSecretReader) FromSecretCalls(stub func(string) (*git.BasicAuth, error)) {
	fake.fromSecretMutex.Lock()
	defer fake.fromSecretMutex.Unlock()
	fake.FromSecretStub = stub
}

func (fake *FakeSecretReader) FromSecretArgsForCall(i int) string {
	fake.fromSecretMutex.RLock()
	defer fake.fromSecretMutex.RUnlock()
	argsForCall := fake.fromSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecretReader) FromSecretReturns(result1 *git.BasicAuth, result2 error) {
	fake.fromSecretMutex.Lock()
	defer fake.fromSecretMutex.Unlock()
	fake.FromSecretStub = nil
	fake.fromSecretReturns = struct {
		result1 *git.BasicAuth
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretReader) FromSecretReturnsOnCall(i int, result1 *git.BasicAuth, result2 error) {
	fake.fromSecretMutex.Lock()
	defer fake.fromSecretMutex.Unlock()
	fake.FromSecretStub = nil
	if fake.fromSecretReturnsOnCall == nil {
		fake.fromSecretReturnsOnCall = make(map[int]struct {
			result1 *git.BasicAuth
			result2 error
		})
	}
	fake.fromSecretReturnsOnCall[i] = struct {
		result1 *git.BasicAuth
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fromSecretMutex.RLock()
	defer fake.fromSecretMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecretReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ git.SecretReader = new(FakeSecretReader)
